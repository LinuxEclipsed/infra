apiVersion: apps/v1
kind: Deployment
metadata:
  name: sonarr
  namespace: arr
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sonarr
  template:
    metadata:
      labels:
        app: sonarr
    spec:
      containers:
      - name: sonarr
        image: lscr.io/linuxserver/sonarr:4.0.12
        imagePullPolicy: IfNotPresent
        env:
        - name: PUID
          value: "1000"
        - name: PGID
          value: "1000"
        - name: TZ
          value: "America/Los_Angeles"
        volumeMounts:
        - mountPath: /config
          name: sonarr-data
        - mountPath: /tv
          name: tvseries
        - mountPath: /downloads
          name: downloads
        ports:
        - containerPort: 8989
        livenessProbe:
          httpGet:
            path: /
            port: 8989
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /
            port: 8989
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
      volumes:
      - name: sonarr-data
        persistentVolumeClaim:
          claimName: sonarr-data-pvc
      - name: tvseries
        nfs:
          server: 192.168.2.252
          path: /mnt/tank/nfs/Temp/Tv
      - name: downloads
        nfs:
          server: 192.168.2.252
          path: /mnt/Junk/Download
      restartPolicy: Always
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prowlarr
  namespace: arr
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prowlarr
  template:
    metadata:
      labels:
        app: prowlarr
    spec:
      containers:
      - name: prowlarr
        image: lscr.io/linuxserver/prowlarr:1.30.2
        imagePullPolicy: IfNotPresent
        env:
        - name: PUID
          value: "1000"
        - name: PGID
          value: "1000"
        - name: TZ
          value: "America/Los_Angeles"
        volumeMounts:
        - mountPath: /config
          name: prowlarr-data
        ports:
        - containerPort: 9696
        livenessProbe:
          httpGet:
            path: /
            port: 9696
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /
            port: 9696
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
      volumes:
      - name: prowlarr-data
        persistentVolumeClaim:
          claimName: prowlarr-data-pvc
      restartPolicy: Always
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: radarr
  namespace: arr
spec:
  replicas: 1
  selector:
    matchLabels:
      app: radarr
  template:
    metadata:
      labels:
        app: radarr
    spec:
      containers:
      - name: radarr
        image: lscr.io/linuxserver/radarr:5.18.4
        imagePullPolicy: IfNotPresent
        env:
        - name: PUID
          value: "1000"
        - name: PGID
          value: "1000"
        - name: TZ
          value: "America/Los_Angeles"
        volumeMounts:
        - mountPath: /config
          name: radarr-data
        - mountPath: /tv
          name: movies
        - mountPath: /downloads
          name: downloads
        ports:
        - containerPort: 7878
        livenessProbe:
          httpGet:
            path: /
            port: 7878
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /
            port: 7878
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
      volumes:
      - name: radarr-data
        persistentVolumeClaim:
          claimName: radarr-data-pvc
      - name: movies
        nfs:
          server: 192.168.2.252
          path: /mnt/tank/nfs/Temp/Movies
      - name: downloads
        nfs:
          server: 192.168.2.252
          path: /mnt/Junk/Download
      restartPolicy: Always
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: lidarr
  namespace: arr
spec:
  replicas: 1
  selector:
    matchLabels:
      app: lidarr
  template:
    metadata:
      labels:
        app: lidarr
    spec:
      containers:
      - name: lidarr
        image: lscr.io/linuxserver/lidarr:2.9.6
        imagePullPolicy: IfNotPresent
        env:
        - name: PUID
          value: "1000"
        - name: PGID
          value: "1000"
        - name: TZ
          value: "America/Los_Angeles"
        volumeMounts:
        - mountPath: /config
          name: lidarr-data
        - mountPath: /music
          name: music
        - mountPath: /downloads
          name: downloads
        ports:
        - containerPort: 8686
        livenessProbe:
          httpGet:
            path: /
            port: 8686
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /
            port: 8686
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
      volumes:
      - name: lidarr-data
        persistentVolumeClaim:
          claimName: lidarr-data-pvc
      - name: music
        nfs:
          server: 192.168.2.252
          path: /mnt/tank/nfs/Music
      - name: downloads
        nfs:
          server: 192.168.2.252
          path: /mnt/Junk/Download
      restartPolicy: Always
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jellyseerr
  namespace: arr
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jellyseerr
  template:
    metadata:
      labels:
        app: jellyseerr
    spec:
      containers:
      - name: jellyseerr
        image: fallenbagel/jellyseerr:2.3.0
        imagePullPolicy: IfNotPresent
        env:
        - name: PUID
          value: "1000"
        - name: PGID
          value: "1000"
        - name: TZ
          value: "America/Los_Angeles"
        volumeMounts:
        - mountPath: /app/config
          name: jellyseerr-data
        ports:
        - containerPort: 5055
        livenessProbe:
          httpGet:
            path: /
            port: 5055
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /
            port: 5055
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
      volumes:
      - name: jellyseerr-data
        persistentVolumeClaim:
          claimName: jellyseerr-data-pvc
      restartPolicy: Always
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: audiobookshelf
  namespace: arr
spec:
  replicas: 1
  selector:
    matchLabels:
      app: audiobookshelf
  template:
    metadata:
      labels:
        app: audiobookshelf
    spec:
      containers:
        - name: audiobookshelf
          image: ghcr.io/advplyr/audiobookshelf:latest
          ports:
            - containerPort: 80
          env:
            - name: TZ
              value: "America/Los_angeles"
          volumeMounts:
            - name: audiobooks
              mountPath: /audiobooks
            - name: config
              mountPath: /config
            - name: metadata
              mountPath: /metadata
      volumes:
        - name: audiobooks
          nfs:
            server: 192.168.2.252
            path: "/mnt/tank/ngs/Temp/Books"
        - name: config
          persistentVolumeClaim:
            claimName: audiobookshelf-config-pvc
        - name: metadata
          persistentVolumeClaim:
            claimName: audiobookshelf-metadata-pvc
